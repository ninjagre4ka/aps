

MARKS
     /* Arithmetical and algebraic operations and functions */

     POW( 2, 60, "^"),   /* power x ^ y                        */
     MOD( 2, 59,"mod"),  /* residual x mod y                   */
     Mult( 2, 58, "*"),  /* multiplication x * y               */
     DIV( 2, 57, "/"),   /* division x / y                     */
     MLT( 2, 56, "$"),   /* uninterpreted                      */
     SUB( 2, 55, "-"),   /* subtraction x - y                  */
     ADD( 2, 54, "+"),   /* addition  x + y                    */

     /* Predicates */

     LE ( 2, 40, "<="),  /* less or equal x <= y               */
     LS ( 2, 40, "<"),   /* less x < y                         */
     ME ( 2, 40, ">="),  /* more or equal x >= y               */
     MR ( 2, 40, ">"),   /* more x > y                         */
     EQ  ( 2, 11, "=="), /* equality of numbers x == y         */
     EQU ( 2, 11, "=" ), /* uninterpreted                      */

     /* Logical connections */

     ~ (  1, 30),        /* logical negation  ~(x)             */
     AND( 2, 29, "&"),   /* logical and x & y                  */
     OR ( 2, 28, "|/"),  /* logical or x || y                  */
     IFF( 2, 27, "<=>"), /* logical equivalence x <=> y        */

     /* Imperative APLAN */

     SET  ( 2, 20, "-->" ),    /* set statement x-->y                 */
     ASS  ( 2, 20, ":="  ),    /* assignement statement x:=y          */
     ELSE ( 2, 19, "else"),    /* used in conditional statement:
                                              x -> y else z           */
     IF   ( 2, 18, "->"  ),    /* implication x -> y and separator
                                   in conditional statements          */
     do   (1),                 /* do statement: do(p)                 */
     while(2),                 /* while statement: while(x,y)         */



     /* Separators */

     comma( 2,  7, ","),
     LL   ( 2,  5, ";"),

     /* Special functions */

     `(1),               /* `(x) = x                                */
     arg (2),            /* arg(f(x1,...,xn)) = xi                  */
     ART (1),            /* ART(x) = arity of x                     */
     vl  (1),            /* vl(x) = copy of value of name x         */
     copy(1),            /* copy(x) is copy of x if x has no loops  */
     mrg (1);            /* merging for ac-operations               */



NAME task;


NAME proglist;
proglist:=prn applytb apply_str apply_r nbt ntb ntr ord
          can6 freeobj set setname entry markcan state return;
ATOMS ?,  @,  /*{,  },*/ #;




















