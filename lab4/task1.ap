INCLUDE <../include/std.ap>
INCLUDE <../include/gen_obj.ap>
INCLUDE <../include/strat.ap>
INCLUDE <../include/array.ap>

/*
NAMES   T,
        diff_rs,
        diff_f;


diff_rs := rs(x, n)(
    (x^n) = n * x^(n - 1),
    sin x = cos x,
    cos x = ~(sin x)
    x = 1
);


diff_f := proc(x)(
    return (x + 0.1) - (x - 0.1)) / (2 * 0.1)
);

T := 2^3;

task := (
    trace(diff_f);
    applr(T, diff_f),
    prn(T)
);
*/

NAMES 
    N,
    procABS,
    proc_integral,
    proc_differencial;


procABS := proc(x)
(
    (x < 0) -> return((-1) * x);
    return (x)
);


proc_integral := proc(K) loc(H, N, V, v, i)(
    N:= 100;
    H := procABS(arg(K, 1) - arg(K, 2)) / N * 1.0;
    V := 0;
    prn(K);
    prn(arg(K, 1));
    prn(arg(K, 2));
    for(i := arg(K, 1) + H, i < arg(K, 2),  i := i + H,
        v := subs(x = i,arg(K, 3));
        V := V + v
    );
    return (H * (((subs(x = arg(K, 1), arg(K, 3)) + subs(x = arg(K, 2), arg(K, 3))) / 2) + V))
);


MARKS INTG(3), DIFF(3);


proc_differencial := proc(K)loc(H)(
    H := 0.01;
    prn(K);
    (arg(K, 1) == 1) -> 
        return(
            (subs(x=(arg(K, 2) + H), arg(K, 3)) - subs(x = (arg(K, 2) - H), arg(K, 3)) ) / 2.0 * H
        );

        return(
            (proc_differencial(DIFF(arg(K, 1) - 1,arg(K, 2) + H,arg(K, 3))) - proc_differencial(DIFF(arg(K, 1) - 1,arg(K, 2) - H, arg(K, 3)))) / 2.0 * H
        )

);

NAMES T1,T2;
T1 := INTG(2, 4, x^2); /*x1, x2, F(x) */
T2 := DIFF(2, 6, x^3 + 5 * x - 8); /*n, x, F(x) */

task := (
    prn(proc_integral(T1)),
    prn(proc_differencial(T2))
);